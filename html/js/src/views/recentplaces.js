// Generated by CoffeeScript 1.6.2
(function() {
  var RecentPlaces, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RecentPlaces = (function(_super) {
    __extends(RecentPlaces, _super);

    function RecentPlaces() {
      _ref = RecentPlaces.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RecentPlaces.prototype.model = Location;

    RecentPlaces.prototype.el = '#recentcontent';

    RecentPlaces.prototype.$list = null;

    RecentPlaces.prototype.getPlaceLink = function(place) {
      var li, link;

      console.log('new link');
      li = document.createElement('li');
      li.id = place.db_key;
      link = document.createElement('a');
      link.href = '/map/' + place.latitude + ',' + place.longitude;
      link.textContent = place.title + ': ' + place.location;
      li.appendChild(link);
      console.log(li);
      return li;
    };

    RecentPlaces.prototype.getPlaceDetails = function(event) {
      var url,
        _this = this;

      url = '/places/info/' + event.target.id;
      return $.getJSON(url, function(data) {
        return _this.showPlacesDetails(data);
      });
    };

    RecentPlaces.prototype.showPlacesDetails = function(data) {
      var $details, content;

      console.log('show places', data);
      $details = $('#homedetail');
      content = '<p>' + data.title + ' by ' + data.author;
      if (!!data.placename) {
        content += '<br/><i>location</i> ' + data.placename;
      }
      if (!!data.scenetime) {
        content += '<br/><i>time</i> ' + data.scenetime;
      }
      if (!!data.actors) {
        content += '<br/><i>characters</i> ' + data.actors;
      }
      if (!!data.symbols) {
        content += '<br/><i>symbols</i> ' + data.symbols;
      }
      if (!!data.description) {
        content += '<br/><i>description</i> ' + data.description;
      }
      if (!!data.notes) {
        content += '<br/><i>notes</i> ' + data.notes;
      }
      content += '<br/><i>visits</i> : ' + data.visits;
      content += '<br/><i>added</i> ' + data.dateadded + '</p>';
      if (data.image_url) {
        content += '<br><img src="' + data.image_url + '"/>';
      }
      return $details.html(content);
    };

    RecentPlaces.prototype.showRecentPlaces = function(data) {
      var link, listFragment, listItems, location, _i, _len;

      listFragment = document.createDocumentFragment();
      this.$list.find('li').remove();
      console.log(data);
      listItems = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          location = data[_i];
          _results.push(this.getPlaceLink(location));
        }
        return _results;
      }).call(this);
      console.log('list items', listItems);
      for (_i = 0, _len = listItems.length; _i < _len; _i++) {
        link = listItems[_i];
        listFragment.appendChild(link);
      }
      this.$list.append(listFragment);
      return listFragment;
    };

    RecentPlaces.prototype.initialize = function() {
      var locations,
        _this = this;

      this.$list = this.$('ul');
      locations = new Locations();
      locations.url = '/places/recent';
      return locations.fetch({
        error: function(model, response) {
          return console.log('error', response);
        },
        success: function(model, response) {
          _this.locations = response;
          console.log('fetched', response);
          return _this.showRecentPlaces(response);
        }
      });
    };

    return RecentPlaces;

  })(Backbone.View);

}).call(this);
