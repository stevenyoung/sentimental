// Generated by CoffeeScript 1.6.2
(function() {
  var MapCanvasView, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MapCanvasView = (function(_super) {
    __extends(MapCanvasView, _super);

    function MapCanvasView() {
      this.addPlace = __bind(this.addPlace, this);      _ref = MapCanvasView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MapCanvasView.prototype.el = 'map_canvas';

    MapCanvasView.prototype.locations = null;

    MapCanvasView.prototype.userInfowindow = null;

    MapCanvasView.prototype.placeInfowindow = null;

    MapCanvasView.prototype.handleMapClick = function(event) {
      return this.setUserMapMarker(this.gmap, event.latLng);
    };

    MapCanvasView.prototype.setUserMapMarker = function(map, location) {
      var _this = this;

      if (this.userMapsMarker != null) {
        this.userMapsMarker.setMap(null);
      }
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      this.userMapsMarker = this.markerFromMapLocation(map, location);
      this.userMapsMarker.setMap(map);
      return google.maps.event.addListener(this.userMapsMarker, 'click', function(event) {
        return _this.isUserLoggedIn();
      });
    };

    MapCanvasView.prototype.isUserLoggedIn = function() {
      var _this = this;

      return $.ajax({
        datatype: 'json',
        url: '/user/status',
        success: function(data) {
          if (data.status === 'logged in') {
            return _this.dropMarkerForNewLocation();
          } else {
            return _this.showLoginInfoWindow();
          }
        }
      });
    };

    MapCanvasView.prototype.showLoginInfoWindow = function() {
      var content, login_url;

      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      this.userInfowindow = this.infowindow();
      content = '<div id="maplogin">';
      content += '<div>You must be logged in to add content.</div>';
      login_url = document.getElementById('loginlink').href;
      content += '<a href="' + login_url + '"><button>log in</button></a></p>';
      this.userInfowindow.setContent(content);
      this.userInfowindow.setPosition(this.userMapsMarker.getPosition());
      return this.userInfowindow.open(this.gmap);
    };

    MapCanvasView.prototype.dropMarkerForNewLocation = function() {
      var location;

      location = this.userMapsMarker.getPosition();
      this.showInfowindowFormAtLocation(this.gmap, this.userMapsMarker, location);
      this.setUserPlaceFromLocation(location);
      return this.handleInfowindowClick();
    };

    MapCanvasView.prototype.updateInfowindowWithMessage = function(infowindow, text) {
      var textcontainer,
        _this = this;

      textcontainer = '<div id="thankswindow">' + text.message + '</div>';
      infowindow.setContent(textcontainer);
      return google.maps.event.addListener(infowindow, 'closeclick', function() {
        return _this.showUpdatedMap();
      });
    };

    MapCanvasView.prototype.showUpdatedMap = function() {
      var locations, m;

      m = new MapCanvasView;
      locations = new Locations();
      return locations.fetch({
        error: function(model, response) {
          return console.log('error', model, response);
        },
        success: function(model, response) {
          m.mapMarkers(response);
          return m.locations = response;
        }
      });
    };

    MapCanvasView.prototype.handleInfowindowClick = function(location) {
      var $addPlaceButton;

      $addPlaceButton = $('#map_canvas .infowindowform').find('.btn');
      if ($addPlaceButton != null) {
        return $addPlaceButton.on('click', this.addPlace);
      }
    };

    MapCanvasView.prototype.addPlace = function(event) {
      var form_data, location, status,
        _this = this;

      form_data = {
        title: $('#title').val(),
        author: $('#author').val(),
        place_name: $('#place_name').val(),
        date: $('#date').val(),
        actors: $('#actors').val(),
        symbols: $('#symbols').val(),
        scene: $('#scene').val(),
        notes: $('#notes').val(),
        image_url: $('#image_url').val(),
        check_in: $('#check_in').prop('checked')
      };
      form_data.latitude = this.userPlace.lat();
      form_data.longitude = this.userPlace.lng();
      location = new Location();
      return status = location.save(form_data, {
        error: function(model, xhr, options) {
          return console.log('error', model, xhr, options);
        },
        success: function(model, response, options) {
          return _this.updateInfowindowWithMessage(_this.userInfowindow, response);
        }
      });
    };

    MapCanvasView.prototype.geocoderSearch = function() {
      var address, geocoder,
        _this = this;

      address = document.getElementById('gcf').value;
      if (address) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': address
        }, function(results, status) {
          var position;

          if (status === google.maps.GeocoderStatus.OK) {
            position = results[0].geometry.location;
            _this.gmap.setCenter(position);
            return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
          } else {
            return alert("geocode was not successful: " + status);
          }
        });
      }
    };

    MapCanvasView.prototype.attachSearchHandler = function() {
      var _this = this;

      document.getElementById('gcf').addEventListener('keydown', function(event) {
        if (event.which === 13 || event.keyCode === 13) {
          event.preventDefault();
          return _this.geocoderSearch();
        }
      });
      return document.getElementById('search').addEventListener('click', function(event) {
        return _this.geocoderSearch();
      });
    };

    MapCanvasView.prototype.mapMarkers = function(locations) {
      var location, mapcenter, usacenter, usacenterCoords, _i, _len;

      this.googlemap('map_canvas');
      for (_i = 0, _len = locations.length; _i < _len; _i++) {
        location = locations[_i];
        this.dropMarkerForStoredLocation(location);
      }
      if (typeof CENTER !== "undefined" && CENTER !== null) {
        mapcenter = new google.maps.LatLng(CENTER.lat, CENTER.lng);
        this.gmap.setCenter(mapcenter);
        return this.gmap.setZoom(this.settings.zoomLevel.close);
      } else {
        usacenterCoords = {
          lat: 39.8282,
          lng: -98.5795
        };
        usacenter = new google.maps.LatLng(usacenterCoords.lat, usacenterCoords.lng);
        return this.gmap.setCenter(usacenter);
      }
    };

    MapCanvasView.prototype.dropMarkerForStoredLocation = function(location) {
      var infowindowContentFromStoredLocation, marker, markerParams, pos,
        _this = this;

      infowindowContentFromStoredLocation = function(data, updateButton) {
        var button_format, content, field_format, image_format, infotemplate, split_line_info, two_line_format;

        field_format = '<br/><span class="pllabel"><%= label %></span>';
        two_line_format = field_format + '<br/><span class="plcontent"><%= content %></span>';
        field_format += '<span class="plcontent"><%= content %></span>';
        button_format = '<br><button class="btn visited" id="<%=place_id %>">';
        button_format += 'check-in</span></label>';
        image_format = '<img src="<%= image_url %>">';
        infotemplate = _.template(field_format);
        split_line_info = _.template(two_line_format);
        content = '<div class="plinfowindow">';
        content += '<span class="lead">' + data.title + ' by ' + data.author + '</span>';
        if (!!data.place_name) {
          content += infotemplate({
            label: 'location',
            content: data.place_name
          });
        }
        if (!!data.scene_time) {
          content += infotemplate({
            label: 'time',
            content: data.place_time
          });
        }
        if (!!data.actors) {
          content += infotemplate({
            label: 'characters',
            content: data.actors
          });
        }
        if (!!data.symbols) {
          content += infotemplate({
            label: 'symbols',
            content: data.symbols
          });
        }
        if (!!data.description) {
          content += split_line_info({
            label: 'description',
            content: data.description
          });
        }
        if (!!data.notes) {
          content += infotemplate({
            label: 'visits',
            content: data.visits
          });
        }
        if (!!data.date_added) {
          content += infotemplate({
            label: 'added',
            content: data.date_added
          });
        }
        if (!!data.image_url) {
          content += _.template(image_format, {
            image_url: data.image_url
          });
        }
        if (updateButton) {
          content += _.template(button_format, {
            place_id: data.id
          });
        }
        content += '</div>';
        return content;
      };
      pos = new google.maps.LatLng(location.latitude, location.longitude);
      markerParams = {
        position: pos,
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png',
        title: "" + location.title + " by " + location.author
      };
      marker = new google.maps.Marker(markerParams);
      marker.setMap(this.gmap);
      return google.maps.event.addListener(marker, 'click', function() {
        var url;

        url = '/places/info/' + location.db_key;
        return $.getJSON(url, function(data) {
          var iw;

          if (_this.placeInfowindow != null) {
            _this.placeInfowindow.close();
          }
          iw = new google.maps.InfoWindow();
          iw.setContent(infowindowContentFromStoredLocation(data, true));
          iw.open(_this.gmap, marker);
          _this.placeInfowindow = iw;
          return $('#map_canvas').on('click', '.visited', function(event) {
            var _this = this;

            $('.visited').hide();
            iw.setContent('updating...');
            return $.getJSON('/places/visit/' + this.id, function(data) {
              return iw.setContent(infowindowContentFromStoredLocation(data, false));
            });
          });
        });
      });
    };

    MapCanvasView.prototype.handleInputAttributes = function() {
      var dealWithIE9Inputs, field, fields, _i, _len, _results;

      fields = $('#iwcontainer input');
      dealWithIE9Inputs = function(element) {
        var _this = this;

        inputElement.setAttribute('value', inputElement.getAttribute('placeholder'));
        return inputElement.addEventListener('focus', function() {
          return _this.value = '';
        });
      };
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        _results.push(dealWithIE9Inputs(field));
      }
      return _results;
    };

    MapCanvasView.prototype.initialize = function() {
      var places,
        _this = this;

      this.$el.height($(window).height() - $('toolbar').height());
      places = new Locations;
      places.fetch({
        error: function(model, response) {
          return console.log('error', response);
        },
        success: function(model, response) {
          _this.mapMarkers(response);
          return _this.locations = response;
        }
      });
      this.showInfowindowFormAtLocation();
      return this.attachSearchHandler();
    };

    return MapCanvasView;

  })(MapView);

}).call(this);
