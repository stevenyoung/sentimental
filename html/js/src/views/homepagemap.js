// Generated by CoffeeScript 1.6.2
(function() {
  var HomepagemapView, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HomepagemapView = (function(_super) {
    __extends(HomepagemapView, _super);

    function HomepagemapView() {
      _ref = HomepagemapView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HomepagemapView.prototype.el = 'hpmap';

    HomepagemapView.prototype.locations = null;

    HomepagemapView.prototype.settings = {
      zoomLevel: {
        'homepagedefault': 14
      }
    };

    HomepagemapView.prototype.cities = {
      'newhaven': {
        lat: 41.3060969411,
        lng: -72.9260498285
      },
      'duluth': {
        lat: 46.7833,
        lng: -92.1064
      },
      'sanfrancisco': {
        lat: 37.7750,
        lng: -122.4183
      }
    };

    HomepagemapView.prototype.googlemap = function(id) {
      this.mapOptions.disableDefaultUI = 'true';
      return HomepagemapView.__super__.googlemap.call(this, id);
    };

    HomepagemapView.prototype.mapMarkers = function(locations) {
      var location, mapcenter, _i, _len;

      this.googlemap('hpmap');
      for (_i = 0, _len = locations.length; _i < _len; _i++) {
        location = locations[_i];
        this.dropMarkerForStoredLocation(location);
      }
      mapcenter = new google.maps.LatLng(this.cities.newhaven.lat, this.cities.newhaven.lng);
      this.gmap.setCenter(mapcenter);
      return this.gmap.setZoom(this.settings.zoomLevel.homepagedefault);
    };

    HomepagemapView.prototype.dropMarkerForStoredLocation = function(location) {
      var marker, markerParams, pos;

      pos = new google.maps.LatLng(location.latitude, location.longitude);
      markerParams = {
        position: pos,
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png',
        title: "" + location.title + " by " + location.author
      };
      marker = new google.maps.Marker(markerParams);
      return marker.setMap(this.gmap);
    };

    HomepagemapView.prototype.handleInputAttributes = function() {
      var dealWithIE9Inputs, field, fields, _i, _len, _results;

      fields = $('#iwcontainer input');
      dealWithIE9Inputs = function(element) {
        var _this = this;

        inputElement.setAttribute('value', inputElement.getAttribute('placeholder'));
        return inputElement.addEventListener('focus', function() {
          return _this.value = '';
        });
      };
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        _results.push(dealWithIE9Inputs(field));
      }
      return _results;
    };

    HomepagemapView.prototype.initialize = function() {
      var places,
        _this = this;

      this.$el.height($(window).height() - $('toolbar').height());
      places = new Locations;
      return places.fetch({
        error: function(model, response) {
          return console.log('error', response);
        },
        success: function(model, response) {
          _this.mapMarkers(response);
          return _this.locations = response;
        }
      });
    };

    return HomepagemapView;

  })(MapView);

}).call(this);
