// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PlacingLit = {
    Models: {},
    Collections: {},
    Views: {}
  };

  PlacingLit.Models.Location = (function(_super) {
    __extends(Location, _super);

    function Location() {
      _ref = Location.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Location.prototype.defaults = {
      title: 'Put Title Here',
      author: 'Someone\'s Name goes here'
    };

    Location.prototype.url = '/places/add';

    return Location;

  })(Backbone.Model);

  PlacingLit.Models.Metadata = (function(_super) {
    __extends(Metadata, _super);

    function Metadata() {
      _ref1 = Metadata.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Metadata.prototype.url = '/places/count';

    Metadata.prototype.initialize = function() {};

    return Metadata;

  })(Backbone.Model);

  PlacingLit.Collections.Locations = (function(_super) {
    __extends(Locations, _super);

    function Locations() {
      _ref2 = Locations.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Locations.prototype.model = PlacingLit.Models.Location;

    Locations.prototype.url = '/places.json';

    Locations.prototype.initialize = function() {
      return this.on('add', function(model) {
        return alert('adding model');
      });
    };

    return Locations;

  })(Backbone.Collection);

  PlacingLit.Collections.NewestLocations = (function(_super) {
    __extends(NewestLocations, _super);

    function NewestLocations() {
      _ref3 = NewestLocations.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    NewestLocations.prototype.model = PlacingLit.Models.Location;

    NewestLocations.prototype.url = '/places/recent';

    return NewestLocations;

  })(Backbone.Collection);

  PlacingLit.Views.MapView = (function(_super) {
    __extends(MapView, _super);

    function MapView() {
      _ref4 = MapView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    MapView.prototype.infowindows = [];

    MapView.prototype.settings = {
      zoomLevel: {
        'wide': 4,
        'default': 10,
        'close': 14,
        'tight': 21,
        'increment': 1
      }
    };

    MapView.prototype.model = PlacingLit.Models.Location;

    MapView.prototype.mapOptions = {
      zoom: 4,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      },
      maxZoom: 25,
      minZoom: 2,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.DEFAULT,
        position: google.maps.ControlPosition.TOP_LEFT
      },
      panControlOptions: {
        position: google.maps.ControlPosition.TOP_LEFT
      }
    };

    MapView.prototype.googlemap = function(id) {
      var _this = this;

      if (this.gmap != null) {
        return this.gmap;
      }
      this.gmap = new google.maps.Map(document.getElementById(id), this.mapOptions);
      google.maps.event.addListener(this.gmap, 'click', function(event) {
        return _this.handleMapClick(event);
      });
      return this.gmap;
    };

    MapView.prototype.marker = function() {
      if (this.placeInfowindow != null) {
        this.placeInfowindow.close();
      }
      return new google.maps.Marker();
    };

    MapView.prototype.infowindow = function() {
      var iw;

      if (this.infowindows.length) {
        this.closeInfowindows();
      }
      iw = new google.maps.InfoWindow();
      this.infowindows.push(iw);
      return iw;
    };

    MapView.prototype.closeInfowindows = function() {
      var iw, _i, _len, _ref5, _results;

      _ref5 = this.infowindows;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        iw = _ref5[_i];
        _results.push(iw.close());
      }
      return _results;
    };

    MapView.prototype.mappoint = function(latitude, longitude) {
      return new google.maps.LatLng(latitude, longitude);
    };

    MapView.prototype.markerFromMapLocation = function(map, location) {
      var markerSettings;

      markerSettings = {
        position: location,
        map: map,
        animation: google.maps.Animation.DROP,
        draggable: true
      };
      return new google.maps.Marker(markerSettings);
    };

    MapView.prototype.updateInfoWindow = function(text, location, map) {
      var infowindow;

      this.map = map != null ? map : this.googlemap();
      infowindow = this.infowindow();
      infowindow.setContent(text);
      infowindow.setPosition(location);
      return infowindow.open(map);
    };

    MapView.prototype.setUserPlaceFromLocation = function(location) {
      return this.userPlace = location;
    };

    MapView.prototype.showInfowindowFormAtLocation = function(map, marker, location) {
      var _this = this;

      this.closeInfowindows();
      this.userInfowindow = this.infowindow();
      this.userInfowindow.setContent(document.getElementById('iwcontainer').innerHTML);
      this.userInfowindow.setPosition(location);
      this.userInfowindow.open(map);
      if (!Modernizr.input.placeholder) {
        return google.maps.event.addListener(this.userInfowindow, 'domready', function() {}, this.clearPlaceholders());
      }
    };

    MapView.prototype.clearPlaceholders = function() {
      $('#title').one('keypress', function() {
        return $('#title').val('');
      });
      $('#author').one('keypress', function() {
        return $('#author').val('');
      });
      $('#place_name').one('keypress', function() {
        return $('#place_name').val('');
      });
      $('#date').one('keypress', function() {
        return $('#date').val('');
      });
      $('#actors').one('keypress', function() {
        return $('#actors').val('');
      });
      $('#symbols').one('keypress', function() {
        return $('#symbols').val('');
      });
      $('#scene').one('keypress', function() {
        return $('#scene').val('');
      });
      $('#notes').one('keypress', function() {
        return $('#notes').val('');
      });
      return $('#image_url').one('keypress', function() {
        return $('#image_url').val('');
      });
    };

    MapView.prototype.closeInfowindows = function() {
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      if (this.placeInfowindow != null) {
        return this.placeInfowindow.close();
      }
    };

    MapView.prototype.clearMapMarker = function(marker) {
      marker.setMap(null);
      return marker = null;
    };

    MapView.prototype.initialize = function() {
      return this.userMapsMarker = null;
    };

    return MapView;

  })(Backbone.View);

  PlacingLit.Views.HomepagemapView = (function(_super) {
    __extends(HomepagemapView, _super);

    function HomepagemapView() {
      _ref5 = HomepagemapView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    HomepagemapView.prototype.el = 'hpmap';

    HomepagemapView.prototype.locations = null;

    HomepagemapView.prototype.settings = {
      zoomLevel: {
        'homepagedefault': 14
      }
    };

    HomepagemapView.prototype.cities = {
      'newhaven': {
        lat: 41.3060969411,
        lng: -72.9260498285
      },
      'duluth': {
        lat: 46.7833,
        lng: -92.1064
      },
      'sanfrancisco': {
        lat: 37.7750,
        lng: -122.4183
      }
    };

    HomepagemapView.prototype.googlemap = function(id) {
      var mapStyle;

      if (this.gmap != null) {
        return this.gmap;
      }
      this.gmap = new google.maps.Map(document.getElementById(id), this.mapOptions);
      mapStyle = 'toner-lite';
      this.gmap.mapTypes.set(mapStyle, new google.maps.StamenMapType(mapStyle));
      this.gmap.setMapTypeId(mapStyle);
      return this.gmap;
    };

    HomepagemapView.prototype.mapMarkers = function(locations) {
      var location, mapcenter, _i, _len, _ref6;

      if ((_ref6 = this.gmap) == null) {
        this.gmap = this.googlemap('hpmap');
      }
      for (_i = 0, _len = locations.length; _i < _len; _i++) {
        location = locations[_i];
        this.dropMarkerForStoredLocation(location);
      }
      mapcenter = new google.maps.LatLng(this.cities.newhaven.lat, this.cities.newhaven.lng);
      console.log('map markers', this.gmap);
      this.gmap.setCenter(mapcenter);
      return this.gmap.setZoom(this.settings.zoomLevel.homepagedefault);
    };

    HomepagemapView.prototype.dropMarkerForStoredLocation = function(location) {
      var marker, markerParams, pos;

      pos = new google.maps.LatLng(location.latitude, location.longitude);
      markerParams = {
        position: pos,
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png',
        title: "" + location.title + " by " + location.author
      };
      marker = new google.maps.Marker(markerParams);
      return marker.setMap(this.gmap);
    };

    HomepagemapView.prototype.initialize = function() {
      var _ref6;

      if ((_ref6 = this.places) == null) {
        this.places = new PlacingLit.Collections.Locations;
      }
      this.listenTo(this.places, 'all', this.render);
      return this.places.fetch();
    };

    HomepagemapView.prototype.render = function(event) {
      if (event === 'sync') {
        return this.mapMarkers(this.places.models);
      }
    };

    return HomepagemapView;

  })(PlacingLit.Views.MapView);

  PlacingLit.Views.MapCanvasView = (function(_super) {
    __extends(MapCanvasView, _super);

    function MapCanvasView() {
      this.addPlace = __bind(this.addPlace, this);      _ref6 = MapCanvasView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MapCanvasView.prototype.el = 'map_canvas';

    MapCanvasView.prototype.locations = null;

    MapCanvasView.prototype.userInfowindow = null;

    MapCanvasView.prototype.placeInfowindow = null;

    MapCanvasView.prototype.initialize = function() {
      var _ref7;

      if ((_ref7 = this.collection) == null) {
        this.collection = new PlacingLit.Collections.Locations;
      }
      this.listenTo(this.collection, 'all', this.render);
      return this.collection.fetch();
    };

    MapCanvasView.prototype.render = function(event) {
      if (event === 'sync') {
        return this.mapWithMarkers();
      }
    };

    MapCanvasView.prototype.mapWithMarkers = function() {
      var _ref7,
        _this = this;

      if ((_ref7 = this.gmap) == null) {
        this.gmap = this.googlemap('map_canvas');
      }
      this.collection.each(function(model) {
        return _this.dropMarkerForStoredLocation(model);
      });
      return this.positionMap();
    };

    MapCanvasView.prototype.markerArrayFromCollection = function(collection) {
      var buildMarker, markerParams, model;

      markerParams = {
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png'
      };
      buildMarker = function(model) {
        var marker, title;

        title = "" + (model.get('title')) + " by " + (model.get('author'));
        markerParams.title = "" + (model.get('title')) + " by " + (model.get('author'));
        markerParams.position = new google.maps.LatLng(model.get('latitude'), model.get('longitude'));
        return marker = new google.maps.Marker(markerParams);
      };
      return (function() {
        var _i, _len, _ref7, _results;

        _ref7 = collection.models;
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          model = _ref7[_i];
          _results.push(buildMarker(model));
        }
        return _results;
      })();
    };

    MapCanvasView.prototype.positionMap = function() {
      var mapcenter, usacenter, usacenterCoords;

      if (typeof CENTER !== "undefined" && CENTER !== null) {
        mapcenter = new google.maps.LatLng(CENTER.lat, CENTER.lng);
        this.gmap.setCenter(mapcenter);
        this.gmap.setZoom(this.settings.zoomLevel.close);
      } else {
        usacenterCoords = {
          lat: 39.8282,
          lng: -98.5795
        };
        usacenter = new google.maps.LatLng(usacenterCoords.lat, usacenterCoords.lng);
        this.gmap.setCenter(usacenter);
        this.gmap.setZoom(2);
      }
      if (typeof PLACEKEY !== "undefined" && PLACEKEY !== null) {
        return this.openInfowindowForPlace(PLACEKEY, mapcenter);
      }
    };

    MapCanvasView.prototype.handleMapClick = function(event) {
      return this.setUserMapMarker(this.gmap, event.latLng);
    };

    MapCanvasView.prototype.setUserMapMarker = function(map, location) {
      var _this = this;

      if (this.userMapsMarker != null) {
        this.userMapsMarker.setMap(null);
      }
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      this.userMapsMarker = this.markerFromMapLocation(map, location);
      this.userMapsMarker.setMap(map);
      return google.maps.event.addListener(this.userMapsMarker, 'click', function(event) {
        return _this.isUserLoggedIn();
      });
    };

    MapCanvasView.prototype.isUserLoggedIn = function() {
      var _this = this;

      return $.ajax({
        datatype: 'json',
        url: '/user/status',
        success: function(data) {
          if (data.status === 'logged in') {
            return _this.dropMarkerForNewLocation();
          } else {
            return _this.showLoginInfoWindow();
          }
        }
      });
    };

    MapCanvasView.prototype.showLoginInfoWindow = function() {
      var content, login_url;

      this.closeInfowindows();
      this.userInfowindow = this.infowindow();
      content = '<div id="maplogin">';
      content += '<div>You must be logged in to add content.</div>';
      login_url = document.getElementById('loginlink').href;
      content += '<a href="' + login_url + '"><button>log in</button></a></p>';
      this.userInfowindow.setContent(content);
      this.userInfowindow.setPosition(this.userMapsMarker.getPosition());
      return this.userInfowindow.open(this.gmap);
    };

    MapCanvasView.prototype.dropMarkerForNewLocation = function() {
      var location;

      location = this.userMapsMarker.getPosition();
      this.showInfowindowFormAtLocation(this.gmap, this.userMapsMarker, location);
      this.setUserPlaceFromLocation(location);
      return this.handleInfowindowButtonClick();
    };

    MapCanvasView.prototype.updateInfowindowWithMessage = function(infowindow, text) {
      var textcontainer,
        _this = this;

      textcontainer = '<div id="thankswindow">' + text.message + '</div>';
      infowindow.setContent(textcontainer);
      return google.maps.event.addListener(infowindow, 'closeclick', function() {
        return _this.showUpdatedMap();
      });
    };

    MapCanvasView.prototype.showUpdatedMap = function() {
      var m;

      return m = new MapCanvasView;
    };

    MapCanvasView.prototype.handleInfowindowButtonClick = function() {
      var $addPlaceButton;

      $addPlaceButton = $('#addplacebutton');
      $addPlaceButton = $('#map_canvas .infowindowform').find('.btn');
      if ($addPlaceButton != null) {
        return $addPlaceButton.on('click', this.addPlace);
      }
    };

    MapCanvasView.prototype.addPlace = function() {
      var form_data, location, message, response, status,
        _this = this;

      message = '<span>adding... please wait...</span>';
      $('#addplacebutton').replaceWith(message);
      form_data = {
        title: $('#title').val(),
        author: $('#author').val(),
        place_name: $('#place_name').val(),
        date: $('#date').val(),
        actors: $('#actors').val(),
        symbols: $('#symbols').val(),
        scene: $('#scene').val(),
        notes: $('#notes').val(),
        image_url: $('#image_url').val(),
        check_in: $('#check_in').prop('checked')
      };
      form_data.latitude = this.userPlace.lat();
      form_data.longitude = this.userPlace.lng();
      if (form_data.title.length === 0) {
        response = {
          message: '<p>This feels incomplete. <br>\
                  Close this window and drop a marker to start over. <br>\
                  Fill out some of these fields so we can add your scene. <br>\
                  Thanks.</p>'
        };
        this.updateInfowindowWithMessage(this.userInfowindow, response);
        return false;
      }
      location = new PlacingLit.Models.Location();
      return status = location.save(form_data, {
        error: function(model, xhr, options) {
          return console.log('add place error - map canvas view', model, xhr, options);
        },
        success: function(model, response, options) {
          return _this.updateInfowindowWithMessage(_this.userInfowindow, response);
        }
      });
    };

    MapCanvasView.prototype.geocoderSearch = function() {
      var address, geocoder,
        _this = this;

      address = document.getElementById('gcf').value;
      if (address) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': address
        }, function(results, status) {
          var position;

          if (status === google.maps.GeocoderStatus.OK) {
            position = results[0].geometry.location;
            _this.gmap.setCenter(position);
            return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
          } else {
            return alert("geocode was not successful: " + status);
          }
        });
      }
    };

    MapCanvasView.prototype.attachSearchHandler = function() {
      var _this = this;

      document.getElementById('gcf').addEventListener('keydown', function(event) {
        if (event.which === 13 || event.keyCode === 13) {
          event.preventDefault();
          return _this.geocoderSearch();
        }
      });
      return document.getElementById('search').addEventListener('click', function(event) {
        return _this.geocoderSearch();
      });
    };

    MapCanvasView.prototype.infowindowContent = function(data, updateButton) {
      var button_format, content, field_format, image_format, infotemplate;

      field_format = '<br><span class="pllabel"><%= label %></span>';
      field_format += '<br><span class="plcontent"><%= content %></span>';
      button_format = '<br><div id="checkin"><button class="btn visited" ';
      button_format += 'id="<%=place_id %>">check-in</button></div>';
      image_format = '<img src="<%= image_url %>">';
      infotemplate = _.template(field_format);
      content = '<div class="plinfowindow">';
      content += '<span class="lead">' + data.title + ' by ' + data.author + '</span>';
      if (!!data.place_name) {
        content += infotemplate({
          label: 'location',
          content: data.place_name
        });
      }
      if (!!data.scene_time) {
        content += infotemplate({
          label: 'time',
          content: data.place_time
        });
      }
      if (!!data.actors) {
        content += infotemplate({
          label: 'characters',
          content: data.actors
        });
      }
      if (!!data.symbols) {
        content += infotemplate({
          label: 'symbols',
          content: data.symbols
        });
      }
      if (!!data.description) {
        content += infotemplate({
          label: 'description',
          content: data.description
        });
      }
      if (!!data.notes) {
        content += infotemplate({
          label: 'notes',
          content: data.notes
        });
      }
      content += infotemplate({
        label: 'visits',
        content: data.visits
      });
      if (!!data.date_added) {
        content += infotemplate({
          label: 'added',
          content: data.date_added
        });
      }
      if (!!data.image_url) {
        content += _.template(image_format, {
          image_url: data.image_url
        });
      }
      if (updateButton) {
        content += _.template(button_format, {
          place_id: data.id
        });
        this.handleCheckinButtonClick();
      }
      content += '</div>';
      return content;
    };

    MapCanvasView.prototype.openInfowindowForPlace = function(place_key, position) {
      var url,
        _this = this;

      url = '/places/info/' + place_key;
      return $.getJSON(url, function(data) {
        var iw;

        if (_this.placeInfowindow != null) {
          _this.placeInfowindow.close();
        }
        iw = _this.infowindow();
        iw.setPosition(position);
        iw.setContent(_this.infowindowContent(data, true));
        iw.open(_this.gmap);
        return _this.placeInfowindow = iw;
      });
    };

    MapCanvasView.prototype.handleCheckinButtonClick = function(event) {
      var _this = this;

      return $('#map_canvas').on('click', '.visited', function(event) {
        $('.visited').hide();
        _this.placeInfowindow.setContent('updating...');
        return $.getJSON('/places/visit/' + event.target.id, function(data) {
          return _this.placeInfowindow.setContent(_this.infowindowContent(data, false));
        });
      });
    };

    MapCanvasView.prototype.dropMarkerForStoredLocation = function(model) {
      var marker, markerParams, pos,
        _this = this;

      pos = new google.maps.LatLng(model.get('latitude'), model.get('longitude'));
      markerParams = {
        position: pos,
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png',
        title: "" + (model.get('title')) + " by " + (model.get('author'))
      };
      marker = new google.maps.Marker(markerParams);
      marker.setMap(this.gmap);
      return google.maps.event.addListener(marker, 'click', function() {
        var url;

        url = '/places/info/' + model.get('db_key');
        return $.getJSON(url, function(data) {
          var iw;

          iw = _this.infowindow();
          iw.setContent(_this.infowindowContent(data, true));
          iw.open(_this.gmap, marker);
          _this.placeInfowindow = iw;
          return _this.handleCheckinButtonClick();
        });
      });
    };

    MapCanvasView.prototype.handleInputAttributes = function() {
      var dealWithIE9Inputs, field, fields, _i, _len, _results;

      fields = $('#iwcontainer input');
      dealWithIE9Inputs = function(el) {
        return el.setAttribute('value', el.getAttribute('placeholder'));
      };
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        _results.push(dealWithIE9Inputs(field));
      }
      return _results;
    };

    return MapCanvasView;

  })(PlacingLit.Views.MapView);

  PlacingLit.Views.RecentPlaces = (function(_super) {
    __extends(RecentPlaces, _super);

    function RecentPlaces() {
      _ref7 = RecentPlaces.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    RecentPlaces.prototype.model = PlacingLit.Models.Location;

    RecentPlaces.prototype.el = '#recentcontent';

    RecentPlaces.prototype.max_desc_length = 100;

    RecentPlaces.prototype.initialize = function() {
      this.collection = new PlacingLit.Collections.Locations;
      this.collection.fetch({
        url: '/places/recent'
      });
      return this.listenTo(this.collection, 'all', this.render);
    };

    RecentPlaces.prototype.render = function(event) {
      if (event === 'sync') {
        return this.showNewestPlaces();
      }
    };

    RecentPlaces.prototype.showNewestPlaces = function() {
      var link, listFragment, listItems, location, locations, _i, _len;

      locations = this.collection.models;
      listFragment = document.createDocumentFragment();
      this.$el.find('li').remove();
      listItems = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = locations.length; _i < _len; _i++) {
          location = locations[_i];
          _results.push(this.getPlaceLink(location));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = listItems.length; _i < _len; _i++) {
        link = listItems[_i];
        listFragment.appendChild(link);
      }
      this.$el.append(listFragment);
      return listFragment;
    };

    RecentPlaces.prototype.getPlaceLink = function(place) {
      var li, link, location_text, title_text;

      li = document.createElement('li');
      li.id = place.get('db_key');
      link = document.createElement('a');
      link.href = '/map/' + place.get('latitude') + ',' + place.get('longitude');
      link.href += '?key=' + place.get('db_key');
      title_text = place.get('title');
      link.textContent = place.get('title');
      if (place.get('location') != null) {
        location_text = place.get('location');
        if ((location_text + title_text).length > this.max_desc_length) {
          location_text = location_text.substr(0, this.max_desc_length - title_text.length) + '...';
        }
        link.textContent += ': ' + location_text;
      }
      li.appendChild(link);
      return li;
    };

    return RecentPlaces;

  })(Backbone.View);

  PlacingLit.Views.Countview = (function(_super) {
    __extends(Countview, _super);

    function Countview() {
      _ref8 = Countview.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Countview.prototype.el = '#count';

    Countview.prototype.initialize = function() {
      this.model = new PlacingLit.Models.Metadata;
      this.model.fetch({
        url: '/places/count'
      });
      return this.listenTo(this.model, 'all', this.render);
    };

    Countview.prototype.render = function(event) {
      if (event === 'change:count') {
        return this.showCount();
      }
    };

    Countview.prototype.showCount = function() {
      return $(this.el).text(this.model.get('count') + ' scenes have been mapped');
    };

    return Countview;

  })(Backbone.View);

  PlacingLit.Views.Allscenes = (function(_super) {
    __extends(Allscenes, _super);

    function Allscenes() {
      _ref9 = Allscenes.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    Allscenes.prototype.el = '#scenelist';

    Allscenes.prototype.initialize = function() {
      this.collection = new PlacingLit.Collections.Locations;
      this.collection.fetch();
      return this.listenTo(this.collection, 'all', this.render);
    };

    Allscenes.prototype.render = function(event) {
      if (event === 'sync') {
        return this.showAllScenes();
      }
    };

    Allscenes.prototype.showAllScenes = function() {
      var link, listFragment, listItems, location, locations, _i, _len;

      locations = this.collection.models;
      listFragment = document.createDocumentFragment();
      listItems = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = locations.length; _i < _len; _i++) {
          location = locations[_i];
          _results.push(this.getPlaceLink(location));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = listItems.length; _i < _len; _i++) {
        link = listItems[_i];
        listFragment.appendChild(link);
      }
      this.$el.append(listFragment);
      return listFragment;
    };

    Allscenes.prototype.getPlaceLink = function(place) {
      var li, link;

      li = document.createElement('li');
      li.id = place.get('db_key');
      link = document.createElement('a');
      link.href = '/map/' + place.get('latitude') + ',' + place.get('longitude');
      link.href += '?key=' + place.get('db_key');
      link.textContent = place.get('title') + ': ' + place.get('location');
      li.appendChild(link);
      return li;
    };

    return Allscenes;

  })(Backbone.View);

}).call(this);
